"use strict";
/*
 * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance with
 * the License. A copy of the License is located at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * or in the "license" file accompanying this file. This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
 * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions
 * and limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.defaultRetryConfig = exports.defaultBackoffFunction = void 0;
const RetryConfig_1 = require("./RetryConfig");
const SLEEP_CAP_MS = 5000;
const SLEEP_BASE_MS = 10;
/**
 * A default backoff function which returns the amount of time(in milliseconds) to delay the next retry attempt
 *
 * @param retryAttempt The number of attempts done till now
 * @param error The error that occurred while executing the previous transaction
 * @param transactionId  The transaction Id for which the execution was attempted
 */
exports.defaultBackoffFunction = (retryAttempt, error, transactionId) => {
    const exponentialBackoff = Math.min(SLEEP_CAP_MS, Math.pow(2, retryAttempt) * SLEEP_BASE_MS);
    const min = 0;
    const max = exponentialBackoff / 2 + 1;
    const jitterRand = Math.random() * (max - min) + min;
    const delayTime = (exponentialBackoff / 2) + jitterRand;
    return delayTime;
};
exports.defaultRetryConfig = new RetryConfig_1.RetryConfig(4, exports.defaultBackoffFunction);
