import { AWSError } from "aws-sdk";
export declare class ClientException extends Error {
    constructor(message: string);
}
export declare class DriverClosedError extends Error {
    constructor();
}
export declare class LambdaAbortedError extends Error {
    constructor();
}
export declare class SessionClosedError extends Error {
    constructor();
}
export declare class SessionPoolEmptyError extends Error {
    constructor(timeout: number);
}
export declare class TransactionClosedError extends Error {
    constructor();
}
export declare class StartTransactionError extends Error {
    cause: Error;
    constructor(e: Error);
}
/**
 * Is the exception an InvalidParameterException?
 * @param e The client error caught.
 * @returns True if the exception is an InvalidParameterException. False otherwise.
 */
export declare function isInvalidParameterException(e: AWSError): boolean;
/**
 * Is the exception an InvalidSessionException?
 * @param e The client error caught.
 * @returns True if the exception is an InvalidSessionException. False otherwise.
 */
export declare function isInvalidSessionException(e: AWSError): boolean;
/**
 * Is the exception because the transaction expired? The transaction expiry is a message wrapped
 * inside InvalidSessionException.
 * @param e The client error to check to see if it is an InvalidSessionException due to transaction expiry.
 * @returns Whether or not the exception is is an InvalidSessionException due to transaction expiry.
 */
export declare function isTransactionExpiredException(e: AWSError): boolean;
/**
 * Is the exception an OccConflictException?
 * @param e The client error caught.
 * @returns True if the exception is an OccConflictException. False otherwise.
 */
export declare function isOccConflictException(e: AWSError): boolean;
/**
 * Is the exception a ResourceNotFoundException?
 * @param e The client error to check to see if it is a ResourceNotFoundException.
 * @returns Whether or not the exception is a ResourceNotFoundException.
 */
export declare function isResourceNotFoundException(e: AWSError): boolean;
/**
 * Is the exception a ResourcePreconditionNotMetException?
 * @param e The client error to check to see if it is a ResourcePreconditionNotMetException.
 * @returns Whether or not the exception is a ResourcePreconditionNotMetException.
 */
export declare function isResourcePreconditionNotMetException(e: AWSError): boolean;
/**
 * Is the exception a BadRequestException?
 * @param e The client error to check to see if it is a BadRequestException.
 * @returns Whether or not the exception is a BadRequestException.
 */
export declare function isBadRequestException(e: AWSError): boolean;
/**
 * Is the exception a retriable exception?
 * @param e The client error caught.
 * @returns True if the exception is a retriable exception. False otherwise.
 */
export declare function isRetriableException(e: AWSError): boolean;
