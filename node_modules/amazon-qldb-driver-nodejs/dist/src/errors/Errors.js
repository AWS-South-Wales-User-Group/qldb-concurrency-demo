"use strict";
/*
 * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance with
 * the License. A copy of the License is located at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * or in the "license" file accompanying this file. This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
 * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions
 * and limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.isRetriableException = exports.isBadRequestException = exports.isResourcePreconditionNotMetException = exports.isResourceNotFoundException = exports.isOccConflictException = exports.isTransactionExpiredException = exports.isInvalidSessionException = exports.isInvalidParameterException = exports.StartTransactionError = exports.TransactionClosedError = exports.SessionPoolEmptyError = exports.SessionClosedError = exports.LambdaAbortedError = exports.DriverClosedError = exports.ClientException = void 0;
const LogUtil_1 = require("../LogUtil");
const transactionExpiredPattern = RegExp("Transaction .* has expired");
class ClientException extends Error {
    constructor(message) {
        super(message);
        Object.setPrototypeOf(this, ClientException.prototype);
        this.message = message;
        this.name = "ClientException";
        LogUtil_1.error(message);
    }
}
exports.ClientException = ClientException;
class DriverClosedError extends Error {
    constructor() {
        const message = "Cannot invoke methods on a closed driver. Please create a new driver and retry.";
        super(message);
        Object.setPrototypeOf(this, DriverClosedError.prototype);
        this.message = message;
        this.name = "DriverClosedError";
        LogUtil_1.error(message);
    }
}
exports.DriverClosedError = DriverClosedError;
class LambdaAbortedError extends Error {
    constructor() {
        const message = "Abort called. Halting execution of lambda function.";
        super(message);
        Object.setPrototypeOf(this, LambdaAbortedError.prototype);
        this.message = message;
        this.name = "LambdaAbortedError";
        LogUtil_1.error(message);
    }
}
exports.LambdaAbortedError = LambdaAbortedError;
class SessionClosedError extends Error {
    constructor() {
        const message = "Cannot invoke methods on a closed QldbSession. Please create a new session and retry.";
        super(message);
        Object.setPrototypeOf(this, SessionClosedError.prototype);
        this.message = message;
        this.name = "SessionClosedError";
        LogUtil_1.error(message);
    }
}
exports.SessionClosedError = SessionClosedError;
class SessionPoolEmptyError extends Error {
    constructor(timeout) {
        const message = "Session pool is empty. Please close existing sessions first before retrying.";
        super(message);
        Object.setPrototypeOf(this, SessionPoolEmptyError.prototype);
        this.message = message;
        this.name = "SessionPoolEmptyError";
        LogUtil_1.error(message);
    }
}
exports.SessionPoolEmptyError = SessionPoolEmptyError;
class TransactionClosedError extends Error {
    constructor() {
        const message = "Cannot invoke methods on a closed Transaction. Please create a new transaction and retry.";
        super(message);
        Object.setPrototypeOf(this, TransactionClosedError.prototype);
        this.message = message;
        this.name = "TransactionClosedError";
        LogUtil_1.error(message);
    }
}
exports.TransactionClosedError = TransactionClosedError;
//CFR: This is exception should be used only by the driver to move to next session in pool 
class StartTransactionError extends Error {
    constructor(e) {
        const message = "Failed to start a transaction. Either another transaction is already open on this session or something else went wrong. Please retry the transaction.";
        super(message);
        Object.setPrototypeOf(this, StartTransactionError.prototype);
        this.message = message;
        this.name = "StartTransactionError";
        this.cause = e;
        LogUtil_1.error(message);
    }
}
exports.StartTransactionError = StartTransactionError;
/**
 * Is the exception an InvalidParameterException?
 * @param e The client error caught.
 * @returns True if the exception is an InvalidParameterException. False otherwise.
 */
function isInvalidParameterException(e) {
    return e.code === "InvalidParameterException";
}
exports.isInvalidParameterException = isInvalidParameterException;
/**
 * Is the exception an InvalidSessionException?
 * @param e The client error caught.
 * @returns True if the exception is an InvalidSessionException. False otherwise.
 */
function isInvalidSessionException(e) {
    return e.code === "InvalidSessionException";
}
exports.isInvalidSessionException = isInvalidSessionException;
/**
 * Is the exception because the transaction expired? The transaction expiry is a message wrapped
 * inside InvalidSessionException.
 * @param e The client error to check to see if it is an InvalidSessionException due to transaction expiry.
 * @returns Whether or not the exception is is an InvalidSessionException due to transaction expiry.
 */
function isTransactionExpiredException(e) {
    return e.code === "InvalidSessionException" && transactionExpiredPattern.test(e.message);
}
exports.isTransactionExpiredException = isTransactionExpiredException;
/**
 * Is the exception an OccConflictException?
 * @param e The client error caught.
 * @returns True if the exception is an OccConflictException. False otherwise.
 */
function isOccConflictException(e) {
    return e.code === "OccConflictException";
}
exports.isOccConflictException = isOccConflictException;
/**
 * Is the exception a ResourceNotFoundException?
 * @param e The client error to check to see if it is a ResourceNotFoundException.
 * @returns Whether or not the exception is a ResourceNotFoundException.
 */
function isResourceNotFoundException(e) {
    return e.code === "ResourceNotFoundException";
}
exports.isResourceNotFoundException = isResourceNotFoundException;
/**
 * Is the exception a ResourcePreconditionNotMetException?
 * @param e The client error to check to see if it is a ResourcePreconditionNotMetException.
 * @returns Whether or not the exception is a ResourcePreconditionNotMetException.
 */
function isResourcePreconditionNotMetException(e) {
    return e.code === "ResourcePreconditionNotMetException";
}
exports.isResourcePreconditionNotMetException = isResourcePreconditionNotMetException;
/**
 * Is the exception a BadRequestException?
 * @param e The client error to check to see if it is a BadRequestException.
 * @returns Whether or not the exception is a BadRequestException.
 */
function isBadRequestException(e) {
    return e.code === "BadRequestException";
}
exports.isBadRequestException = isBadRequestException;
/**
 * Is the exception a retriable exception?
 * @param e The client error caught.
 * @returns True if the exception is a retriable exception. False otherwise.
 */
function isRetriableException(e) {
    return (e.statusCode === 500) ||
        (e.statusCode === 503) ||
        (e.code === "NoHttpResponseException") ||
        (e.code === "SocketTimeoutException");
}
exports.isRetriableException = isRetriableException;
