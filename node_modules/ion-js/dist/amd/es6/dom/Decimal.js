var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
define(["require", "exports", "../Ion", "../Ion", "./FromJsConstructor", "./Value"], function (require, exports, ion, Ion_1, FromJsConstructor_1, Value_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Decimal = void 0;
    ion = __importStar(ion);
    const _fromJsConstructor = new FromJsConstructor_1.FromJsConstructorBuilder()
        .withClasses(ion.Decimal)
        .build();
    class Decimal extends Value_1.Value(Number, Ion_1.IonTypes.DECIMAL, _fromJsConstructor) {
        constructor(value, annotations = []) {
            super(...[value.getCoefficient(), value.getExponent(), value.isNegative()]);
            this._decimalValue = value;
            this._numberValue = value.numberValue();
            this._setAnnotations(annotations);
        }
        numberValue() {
            return this._numberValue;
        }
        decimalValue() {
            return this._decimalValue;
        }
        toString() {
            return this._decimalValue.toString();
        }
        valueOf() {
            return this._numberValue;
        }
        writeTo(writer) {
            writer.setAnnotations(this.getAnnotations());
            writer.writeDecimal(this.decimalValue());
        }
    }
    exports.Decimal = Decimal;
});
//# sourceMappingURL=Decimal.js.map