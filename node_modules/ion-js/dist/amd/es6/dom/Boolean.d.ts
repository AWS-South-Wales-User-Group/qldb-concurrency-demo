import { Writer } from "../Ion";
import { Value } from "./Value";
declare const Boolean_base: {
    new (...args: any[]): {
        _ionType: import("../IonType").IonType;
        _ionAnnotations: string[];
        _unsupportedOperation<T extends Value>(functionName: string): never;
        getType(): import("../IonType").IonType;
        _setAnnotations(annotations: string[]): void;
        getAnnotations(): string[];
        isNull(): boolean;
        booleanValue(): boolean | null;
        numberValue(): number | null;
        bigIntValue(): import("jsbi").default | null;
        decimalValue(): import("../IonDecimal").Decimal | null;
        stringValue(): string | null;
        dateValue(): Date | null;
        timestampValue(): import("../IonTimestamp").Timestamp | null;
        uInt8ArrayValue(): Uint8Array | null;
        fieldNames(): string[];
        fields(): [string, Value][];
        elements(): Value[];
        get(...pathElements: (string | number)[]): Value | null;
        as<T_1 extends Value>(ionValueType: import("./Value").Constructor<T_1>): T_1;
        writeTo(writer: Writer): void;
        deleteField(name: string): boolean;
    };
    _getIonType(): import("../IonType").IonType;
    _fromJsValue(jsValue: any, annotations: string[]): Value;
} & BooleanConstructor;
export declare class Boolean extends Boolean_base {
    constructor(value: boolean, annotations?: string[]);
    booleanValue(): boolean;
    writeTo(writer: Writer): void;
}
export {};
